#!/bin/bash

set -e -u

check_if_debug_mode() {
  if [ "$is_debug_mode" == "true" ]; then
   echo "debug mode enabled" >&2
   # enable debug
   export GH_DEBUG=1
   set -x
 fi
}

# Define a function for logging with different log levels
log_message() {
  # Generate a timestamp
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")

  # Get the script name
  script_name=$(basename "$0")

  # Get the process ID
  pid=$$

  # Get the log level from the first argument (e.g., "INFO" or "ERROR")
  log_level="$1"
  shift  # Remove the first argument, so only the message remains

  # Combine various information into the log message
  log_message="$timestamp - PID: $pid - Script: $script_name - $log_level: $*"

  # Print the log message
  echo "$log_message" >&2
}

log_info() {
  log_message "INFO" "$@"
}

log_debug() {
  log_message "DEBUG" "$@"
}

log_error() {
  log_message "ERROR" "$@"
}

# Function: check_org_membership
#
# Description: Checks if a user is a member of the specified github org by calling the Github Api
#
#
# Returns 204 if BOTH requester and user is a member
# Returns 302 if requester is not an org members
# Returns 404 if requester and user is not a member
declare -F check_org_membership > /dev/null || check_org_membership() {
  set +e
    response=$(gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/$org/members/$username" \
                -i)
    set -e
  http_status=$(echo "$response" | grep -oP 'HTTP/[\d.]+\s+\K\d+')
  log_debug "response_status_code: $http_status"
  if [[ "$http_status" -eq 204]]; then
      log_debug "Both Requestor and User are members of $org"
      echo 0
  elif [[" $http_status" -eq 302]]; then
      log_debug "Requestor is not a member of $org"
      echo 1
  elif [[ "$http_status" -eq 404]]; then
      log_debug "User is not a member of  $org"
      echo 2
  fi
}
check_if_valid_org_user() {
  if [ -n "$ghe_host" ]; then
    log_debug "ghe_host provided - using $ghe_host"
    export GH_ENTERPRISE_TOKEN=$access_token
    export GH_HOST=$ghe_host
  else
    log_debug "ghe_host not provided - using github.com"
    export GH_TOKEN=$access_token
  fi

  log_info "Checking if $username belongs to $org"
  result = $(check_org_membership)
  log_debug "result [$result]"

  if [ "$result" -eq 0 ]; then
    log_debug "$org is a valid org for $username"
    return 0
  else
    return 1
  fi

}

check_if_valid_user() {
  if [ -n "$ghe_host" ]; then
    log_debug "ghe_host provided - using $ghe_host"
    export GH_ENTERPRISE_TOKEN=$access_token
    export GH_HOST=$ghe_host
  else
    log_debug "ghe_host not provided - using github.com"
    export GH_TOKEN=$access_token
  fi

  if [ "$number_of_users" -gt 0 ]; then
    log_info "Checking [$number_of_users] users"
    for ((i = 0; i < number_of_users; i++)); do
      user=$(jq -r '.source.users['"$i"'] // ""' <<< "$payload")
      log_debug "Checking user: $user"
      if [ "$user" == "$BUILD_CREATED_BY" ]; then
        log_debug "Found valid user: $user == $BUILD_CREATED_BY"
        log_info "Checking if $username belongs to $org"
        result = $(check_org_membership)
        log_debug "result [$result]"
        if [ "$result" -eq 0 ]; then
          global_is_valid=1  # Early return if a match is found
        fi
        return 0
      fi
    done
  fi
}



# Function: check_team_membership
#
# Description: Checks if the user is a member of the specified team by calling the GitHub API. The function uses
# `declare -F check_team_membership >/dev/null` to check if the function is already defined.
# If the function is already defined, it will not be redefined. This is so that the function can be mocked in tests.
#
# Returns: 0 if the user is a member of the team, 1 if the user is not a member of the team, 2 if the request failed
#
declare -F check_team_membership >/dev/null || check_team_membership() {
  set +e
     response_headers=$(gh api \
         -H "Accept: application/vnd.github+json" \
         -H "X-GitHub-Api-Version: 2022-11-28" \
         "/orgs/$org/teams/$teams/memberships/$username" \
         -i)
     set -e
  response_status_code=$(echo "$response_headers" | grep 'HTTP/' | awk '{print $2}')
  log_debug "response_status_code: $response_status_code"
  # Check the response status code
  if [ "$response_status_code" -eq 200 ]; then
     log_debug "Request was successful (HTTP status code 200)."
     echo 0
  elif [ "$response_status_code" -eq 404 ]; then
     log_debug "Resource not found (HTTP status code 404)."
     echo 1
  else
     log_error "Request failed with HTTP status code: $response_status_code."
     echo 2
  fi
}

check_if_valid_team_member() {

if [ -n "$ghe_host" ]; then
  log_debug "ghe_host provided - using $ghe_host"
  export GH_ENTERPRISE_TOKEN=$access_token
  export GH_HOST=$ghe_host
else
  log_debug "ghe_host not provided - using github.com"
  export GH_TOKEN=$access_token
fi

if [ "$number_of_teams" -gt 0 ]; then
 log_info "checking teams"
 for ((i = 0; i < number_of_teams; i++))
 do
    teams=$(jq -r '.source.teams['"$i"'] // ""' <<< "$payload")
    log_debug "checking if [$username] belongs to team [$teams]"

    result=$(check_team_membership)
    log_debug "result [$result]"

    if [ "$result" -eq 0 ]; then
      log_debug "Found valid team: $teams"
      global_is_valid=1  # Early return if a match is found
      return 0
    fi
 done
fi
}

validate() {
 if [ "$global_is_valid" -ne 0 ]; then
   log_debug "is_valid: $global_is_valid"
   log_debug "This user is authorized to trigger this job."
   # output the result
   jq -n "{version:{version:\"v\"}}" >&3
 else
   log_error "This user is not authorized to trigger this job."
   exit 1
 fi
}

main() {
  log_info "validating if user [$BUILD_CREATED_BY] is authorized to trigger job [$BUILD_JOB_NAME]" >&2
  log_debug "BUILD_CREATED_BY: $BUILD_CREATED_BY" >&2
  log_debug "suffix provided: $suffix" >&2
  log_debug "username used for API request: $username" >&2

  check_if_debug_mode
  check_if_valid_user
  check_if_valid_team_member
  validate
}

# Check if the script is being sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    log_debug "Script is being sourced. It will not run."
else
    log_debug "Script is being executed directly."
    exec 3>&1 # make stdout available as fd 3 for the result
    exec 1>&2 # redirect all output to stderr for logging

    # Check if a command-line argument was provided
    if [ $# -eq 1 ] && jq -e . <<< "$1" >/dev/null 2>&1; then
        # If a single argument was provided, use it as the payload
        echo "cli argument provided"
        payload="$1"
        echo "payload: $payload"
    else
        # If no argument was provided, read from stdin and store it in the payload
        echo "no cli argument provided - reading from stdin"
        payload="$(cat <&0)"
        echo "payload: $payload"
    fi

    access_token=$(jq -r '.source.access_token // ""' <<< "$payload")
    ghe_host=$(jq -r '.source.ghe_host // ""' <<< "$payload")
    org=$(jq -r '.source.org // ""' <<< "$payload")
    suffix=$(jq -r '.source.suffix // ""' <<< "$payload")
    username="$BUILD_CREATED_BY$suffix"
    is_debug_mode=$(jq -r '.params.debug // ""' <<< "$payload")
    total_number_of_users=$(jq -r '.source.users // ""' <<< "$payload" | wc -l)
    number_of_users=$(echo $(expr $total_number_of_users - 2))
    total_number_of_teams=$(jq -r '.source.teams // ""' <<< "$payload" | wc -l)
    number_of_teams=$(echo $(expr $total_number_of_teams - 2))

    global_is_valid=0

    main
fi
