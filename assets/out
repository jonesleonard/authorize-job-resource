#!/bin/bash


set -e -u
exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging


payload="$(cat <&0)"
gh_token=$(jq -r '.source.gh_token // ""' <<< "$payload")
ghe_token=$(jq -r '.source.ghe_token // ""' <<< "$payload")
ghe_host=$(jq -r '.source.ghe_host // ""' <<< "$payload")
org=$(jq -r '.source.org // ""' <<< "$payload")
total_number_of_users=$(jq -r '.source.users // ""' <<< "$payload" | wc -l)
number_of_users=$(echo $(expr $total_number_of_users - 2))
total_number_of_teams=$(jq -r '.source.teams // ""' <<< "$payload" | wc -l)
number_of_teams=$(echo $(expr $total_number_of_teams - 2))


is_valid=0


# set the github token
export GH_TOKEN=$gh_token
export GH_ENTERPRISE_TOKEN=$ghe_token
export GH_HOST=$ghe_host


# enable debug
export GH_DEBUG=1


check_if_valid_user() {
 if [ "$number_of_users" -gt 0 ]; then
   echo "checking [$number_of_users] users"
   for ((i = 0; i < number_of_users; i++))
     do
       users=$(jq -r '.source.users['$i'] // ""' <<< "$payload")
       echo "checking user: $users"
       if [ "$users" == "$BUILD_CREATED_BY" ]; then
         echo "found valid user: $users == $BUILD_CREATED_BY"
         is_valid=1
         break
       fi
     done
 fi
}


check_if_valid_ghec_team_member() {
if [ "$number_of_teams" -gt 0 ]; then
 echo "checking teams"
 for ((i = 0; i < number_of_teams; i++))
 do
   teams=$(jq -r '.source.teams['$i'] // ""' <<< "$payload")
   echo "checking if [$BUILD_CREATED_BY] belongs to team [$teams]"


   set +e
   response_headers=$(gh api \
       -H "Accept: application/vnd.github+json" \
       -H "X-GitHub-Api-Version: 2022-11-28" \
       /orgs/"$org"/teams/"$teams"/memberships/"$BUILD_CREATED_BY"_comcast \
       -i)
   set -e


   response_status_code=$(echo "$response_headers" | grep 'HTTP/' | awk '{print $2}')
   validate_response_status_code "$response_status_code"
 done
fi
}


check_if_valid_ghes_team_member() {
if [ "$number_of_teams" -gt 0 ]; then
 echo "checking teams"
 for ((i = 0; i < number_of_teams; i++))
 do
   teams=$(jq -r '.source.teams['$i'] // ""' <<< "$payload")
   echo "checking if [$BUILD_CREATED_BY] belongs to team [$teams]"


   set +e
   response_headers=$(gh api \
       -H "Accept: application/vnd.github+json" \
       -H "X-GitHub-Api-Version: 2022-11-28" \
       /orgs/"$org"/teams/"$teams"/memberships/"$BUILD_CREATED_BY"_comcast \
       -i)
   set -e


   response_status_code=$(echo "$response_headers" | grep 'HTTP/' | awk '{print $2}')
   validate_response_status_code "$response_status_code"
 done
fi
}


validate_response_status_code() {
 # Check the response status code
 if [ "$1" -eq 200 ]; then
     echo "Request was successful (HTTP status code 200)." >&2
     is_valid=1
 elif [ "$1" -eq 404 ]; then
     echo "Resource not found (HTTP status code 404)." >&2
 else
     echo "Request failed with HTTP status code: $response_status_code." >&2
 fi
}


check_if_valid_team_member() {
if [ -n "$gh_token" ]; then
  # gh_token provided - use github.com
  echo "gh_token provided - using default github.com"
  check_if_valid_ghec_team_member
elif [ -z "$gh_token" ] && [ -n "$ghe_token" ] && [ -n "$ghe_host" ]; then
  # ghe_token and ghe_host provided - use ghe_host
  echo "ghe_token and ghe_host provided - using $ghe_host"
  check_if_valid_ghes_team_member
else
  echo "invalid configuration - please provide gh_token or both ghe_token and ghe_host"
  exit 1
fi
}


check_is_valid() {
 if [ "$is_valid" -ne 0 ]; then
   echo "is_valid: $is_valid"
   echo "This user is authorized to trigger this job."
   # output the result
   jq -n "{
    version: { version: \"v\" }
    }" >&3
 else
   echo "This user is not authorized to trigger this job." >&2
   exit 1
 fi
}




echo "validating if user [$BUILD_CREATED_BY] is authorized to trigger job" >&2


check_if_valid_user
check_if_valid_team_member
check_is_valid


